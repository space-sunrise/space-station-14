uniform sampler2D SCREEN_TEXTURE;

uniform highp float ThermalBoost;
uniform highp float ThermalIntensity;

const highp vec3 cBlack  = vec3(0.00, 0.00, 0.00);
const highp vec3 cBlue   = vec3(0.00, 0.00, 0.65);
const highp vec3 cGreen  = vec3(0.00, 0.65, 0.00);
const highp vec3 cYellow = vec3(0.65, 0.65, 0.00);
const highp vec3 cRed    = vec3(0.65, 0.00, 0.00);
const highp vec3 cWhite  = vec3(0.65, 0.65, 0.65);

highp vec3 getThermalColor(in highp float t)
{
    // 0.0..0.2:  black -> blue
    // 0.2..0.4:  blue  -> green
    // 0.4..0.6:  green -> yellow
    // 0.6..0.8:  yellow-> red
    // 0.8..1.0:  red   -> white

    if (t < 0.2)
    {
        highp float alpha = t / 0.2;
        return mix(cBlack, cBlue, alpha);
    }
    else if (t < 0.4)
    {
        highp float alpha = (t - 0.2) / 0.2;
        return mix(cBlue, cGreen, alpha);
    }
    else if (t < 0.6)
    {
        highp float alpha = (t - 0.4) / 0.2;
        return mix(cGreen, cYellow, alpha);
    }
    else if (t < 0.8)
    {
        highp float alpha = (t - 0.6) / 0.2;
        return mix(cYellow, cRed, alpha);
    }
    else
    {
        highp float alpha = (t - 0.8) / 0.2;
        return mix(cRed, cWhite, alpha);
    }
}

void fragment()
{
    COLOR = zTextureSpec(SCREEN_TEXTURE, Pos);

    highp float lum = dot(COLOR.rgb, vec3(0.299, 0.587, 0.114));

    lum *= ThermalBoost;
    lum = clamp(lum, 0.0, 1.0);

    highp vec3 thermalColor = getThermalColor(lum);

    COLOR.rgb = mix(COLOR.rgb, thermalColor, ThermalIntensity);
}
