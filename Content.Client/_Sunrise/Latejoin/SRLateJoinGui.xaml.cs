using Content.Client.CrewManifest;
using Content.Client.GameTicking.Managers;
using Content.Client.Lobby;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Console;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class SRLateJoinGui : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConsoleHost _consoleHost = default!;
    [Dependency] private readonly JobRequirementsManager _playManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;

    private ClientGameTicker _gameTicker;

    private NetEntity _lastSelection;

    private readonly Dictionary<string, BoxContainer> _jobCategories;
    private readonly Dictionary<string, SRLateJoinJobButton> _buttons = new();

    public SRLateJoinGui()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = EntitySystem.Get<ClientGameTicker>();
        _gameTicker.LobbyJobsAvailableUpdated += UpdateUi;

        _jobCategories = new Dictionary<string, BoxContainer>();
        StationSelection.StationsItemList.OnItemSelected += args =>
        {
            UpdateUi(_gameTicker.JobsAvailable);
        };
        CrewManifestButton.OnPressed += _ =>
        {
            EntitySystem.Get<CrewManifestSystem>().RequestCrewManifest(_lastSelection);
        };

        _lastSelection = _gameTicker.JobsAvailable.Keys.FirstOrNull() ?? NetEntity.Invalid;

        UpdateUi(_gameTicker.JobsAvailable);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _gameTicker.LobbyJobsAvailableUpdated -= UpdateUi;
    }

    public void UpdateUi(IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> obj)
    {
        if (StationSelection.Selected is null)
        {
            CrewManifestButton.Visible = false;
            return;
        }

        CrewManifestButton.Visible = true;

        var station = StationSelection.Selected.Value;
        var jobs = obj[station];

        if (station != _lastSelection)
        {
            foreach (var (_, button) in _buttons)
            {
                JobList.RemoveChild(button);
            }
            _buttons.Clear();
            foreach (var (_, box) in _jobCategories)
            {
                JobList.RemoveChild(box);
            }
            _jobCategories.Clear();
        }

        _lastSelection = station;

        var departments = new List<DepartmentPrototype>();
        foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
        {
            if (department.EditorHidden)
                continue;

            departments.Add(department);
        }

        departments.Sort(DepartmentUIComparer.Instance);

        foreach (var department in departments)
        {
            var departmentName = Loc.GetString($"department-{department.ID}");

            var hasRole = false;
            foreach (var (jobId, _) in jobs)
            {
                if (department.Roles.Contains(jobId))
                {
                    hasRole = true;
                    break;
                }
            }

            if (!hasRole)
            {
                continue;
            }

            if (!_jobCategories.TryGetValue(department.ID, out var category))
            {
                category = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                    Name = department.ID,
                    ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                        ("departmentName", departmentName))
                };

                var departamentLabel = new Label
                {
                    Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                        ("departmentName", departmentName)),
                    Margin = new Thickness(5f, 0, 0, 0)
                };

                category.AddChild(new StripeBack()
                {
                    Visible = true,
                    HorizontalExpand = true,
                    HasMargins = true,
                    MouseFilter = MouseFilterMode.Stop,
                    Children =
                    {
                        departamentLabel
                    }
                });

                _jobCategories[department.ID] = category;
                JobList.AddChild(category);
            }

            foreach (var (jobId, _) in jobs)
            {
                if (!department.Roles.Contains(jobId))
                    continue;

                if (_buttons.ContainsKey(jobId))
                    continue;

                var job = _prototypeManager.Index(jobId);

                var newButton = new SRLateJoinJobButton(station, jobId, _gameTicker, _prototypeManager);
                newButton.OnPressed += _ =>
                {
                    Logger.InfoS("latejoin", $"Late joining as ID: {jobId}");
                    _consoleHost.ExecuteCommand($"joingame {CommandParsing.Escape(jobId)} {station}");
                    Close();
                };

                if (!_playManager.IsAllowed(job, (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter, out var denyReason))
                {
                    newButton.Disabled = true;
                    newButton.ToolTip = denyReason.ToString();
                }

                JobList.AddChild(newButton);

                _buttons.Add(jobId, newButton);
            }
        }
    }
}
