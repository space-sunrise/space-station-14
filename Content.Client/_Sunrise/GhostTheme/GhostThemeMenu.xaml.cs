// Â© SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/space-station-14/blob/master/CLA.txt
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared._Sunrise.GhostTheme;
using Content.Shared._Sunrise.SunriseCCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.GhostTheme;

[GenerateTypedNameReferences]
public sealed partial class GhostThemeMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;

    public event Action<string>? OnIdSelected;

    private List<string> _availableGhostThemes = [];
    private string _currentSelectedTheme = string.Empty;
    private string _searchText = string.Empty;

    public GhostThemeMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        
        SearchBar.OnTextChanged += OnSearchTextChanged;
    }

    private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text;
        UpdateButtons();
    }

    public void UpdateState(List<string> ghostThemes)
    {
        _availableGhostThemes = ghostThemes;
        UpdateButtons();
        
        var currentTheme = _cfg.GetCVar(SunriseCCVars.SponsorGhostTheme);
        if (!string.IsNullOrEmpty(currentTheme) && _availableGhostThemes.Contains(currentTheme))
        {
            _currentSelectedTheme = currentTheme;
            UpdatePreview(_currentSelectedTheme);
        }
        else if (_availableGhostThemes.Count > 0)
        {
            _currentSelectedTheme = _availableGhostThemes[0];
            UpdatePreview(_currentSelectedTheme);
        }
    }

    private void UpdateButtons()
    {
        ClearButtons();

        foreach (var ghostTheme in _availableGhostThemes)
        {
            if (!_prototypeManager.TryIndex(ghostTheme, out GhostThemePrototype? ghostThemePrototype))
                continue;

            var themeName = Loc.GetString(ghostThemePrototype.Name);
            if (!string.IsNullOrEmpty(_searchText) && 
                !themeName.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()) &&
                !ghostTheme.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()))
                continue;

            var button = new Button
            {
                MinHeight = 50,
                HorizontalExpand = true,
                ToggleMode = true,
                Pressed = ghostTheme == _currentSelectedTheme
            };
            
            var panel = new PanelContainer
            {
                HorizontalExpand = true
            };
            
            var box = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(5)
            };

            var ghostIcon = new TextureRect
            {
                Texture = ghostThemePrototype.Sprite.Frame0(),
                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                SetSize = new Vector2(40, 40)
            };
            
            var nameLabel = new Label
            {
                Text = Loc.GetString(ghostThemePrototype.Name),
                StyleClasses = { StyleNano.StyleClassLabelBig },
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(10, 0, 0, 0)
            };
            
            box.AddChild(ghostIcon);
            box.AddChild(nameLabel);
            panel.AddChild(box);
            button.AddChild(panel);
            
            button.OnPressed += _ =>
            {
                foreach (var child in ButtonContainer.Children)
                {
                    if (child is Button otherButton && otherButton != button)
                        otherButton.Pressed = false;
                }
                
                button.Pressed = true;
                _currentSelectedTheme = ghostTheme;
                OnIdSelected?.Invoke(ghostTheme);
                _cfg.SetCVar(SunriseCCVars.SponsorGhostTheme, ghostTheme);
                _cfg.SaveToFile();
                
                UpdatePreview(ghostTheme);
            };
            
            ButtonContainer.AddChild(button);
        }
    }
    
    private void UpdatePreview(string ghostTheme)
    {
        if (!_prototypeManager.TryIndex(ghostTheme, out GhostThemePrototype? ghostThemePrototype))
            return;
        
        PreviewTexture.Texture = ghostThemePrototype.Sprite.Frame0();
        PreviewTexture.ModulateSelfOverride = ghostThemePrototype.SpriteColor;
        PreviewName.Text = Loc.GetString(ghostThemePrototype.Name);
        
        PreviewDescription.Text = Loc.GetString("ghost-theme-preview-description");
    }

    private void ClearButtons()
    {
        ButtonContainer.RemoveAllChildren();
    }
}
