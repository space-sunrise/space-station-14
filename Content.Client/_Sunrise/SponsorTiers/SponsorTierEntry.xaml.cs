// © SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/space-station-14/blob/master/CLA.txt
using System.Numerics;
using Content.Client._Sunrise.TTS;
using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Client.Resources;
using Content.Client.Stylesheets;
using Content.Shared._Sunrise.GhostTheme;
using Content.Shared._Sunrise.TTS;
using Content.Shared.Clothing;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Content.Sunrise.Interfaces.Shared;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.SponsorTiers;

[GenerateTypedNameReferences]
public sealed partial class SponsorTierEntry : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private readonly LobbyUIController _lobbyUIController;
    private readonly ISharedSponsorsManager? _sponsorsManager;

    private float _accumulatedTime;
    private readonly List<SpriteView> _spriteViews = new();
    private readonly SponsorInfo _sponsorInfoTier;

    public int Index { get; }

    public SponsorTierEntry(SponsorInfo sponsorTier, int index)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        IoCManager.Instance!.TryResolveType(out _sponsorsManager);
        _lobbyUIController = UserInterfaceManager.GetUIController<LobbyUIController>();

        Index = index;
        _sponsorInfoTier = sponsorTier;

        LoadTierInfo(sponsorTier.Tier, sponsorTier.OOCColor, sponsorTier.ExtraSlots, sponsorTier.HavePriorityJoin, sponsorTier.AllowedRespawn);
        LoadOpenAntags(sponsorTier.OpenAntags);
        LoadPriorityAntags(sponsorTier.PriorityAntags);
        LoadAllowedMarkings(sponsorTier.AllowedMarkings);
        LoadAllowedSpecies(sponsorTier.AllowedSpecies);
        LoadGhostThemes(sponsorTier.GhostThemes);
        LoadPriorityGhostRoles(sponsorTier.PriorityGhostRoles);
        LoadOpenGhostRoles(sponsorTier.OpenGhostRoles);
        LoadAllowedVoices(sponsorTier.AllowedVoices);
        LoadAllowedLoadouts(sponsorTier.AllowedLoadouts);
        if (_preferencesManager.ServerDataLoaded)
        {
            LoadOpenRoles(_sponsorInfoTier.OpenRoles);
            LoadPriorityRoles(_sponsorInfoTier.PriorityRoles);
            LoadBypassRoles(_sponsorInfoTier.BypassRoles);
        }
        else
        {
            _preferencesManager.OnServerDataLoaded += PreferencesDataLoaded;
        }
    }

    private void PreferencesDataLoaded()
    {
        LoadOpenRoles(_sponsorInfoTier.OpenRoles);
        LoadPriorityRoles(_sponsorInfoTier.PriorityRoles);
        LoadBypassRoles(_sponsorInfoTier.BypassRoles);
    }

    private void LoadTierInfo(int tier, string? oocColor, int extraSlots, bool priorityJoin, bool allowedRespawn)
    {
        TierLabel.Text = $"{tier}";
        if (!string.IsNullOrEmpty(oocColor))
        {
            OocColorLabel.Text = "цвет";
            OocColorLabel.FontColorOverride = Color.FromHex(oocColor);
        }
        ExtraSlotsLabel.Text = $"{extraSlots}";
        PriorityJoinLabel.Text = priorityJoin ? "Да" : "Нет";
        AllowedRespawnLabel.Text = allowedRespawn ? "Да" : "Нет";
    }

    private void LoadOpenGhostRoles(IReadOnlyCollection<string> openGhostRoles)
    {
        foreach (var openGhostRole in openGhostRoles)
        {
            if (!_prototypeManager.TryIndex(openGhostRole, out EntityPrototype? ghostRolePrototype))
                continue;

            var dummyEnt = _entityManager.SpawnEntity(ghostRolePrototype.ID, MapCoordinates.Nullspace);

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon($"ent-{ghostRolePrototype.ID}", view);

            OpenGhostRolesGrid.AddChild(panel);
        }

        OpenGhostRolesBox.Visible = OpenGhostRolesGrid.ChildCount > 0;
    }

    private void LoadPriorityGhostRoles(IReadOnlyCollection<string> priorityGhostRoles)
    {
        foreach (var priorityGhostRole in priorityGhostRoles)
        {
            if (!_prototypeManager.TryIndex(priorityGhostRole, out EntityPrototype? ghostRolePrototype))
                continue;

            var dummyEnt = _entityManager.SpawnEntity(ghostRolePrototype.ID, MapCoordinates.Nullspace);

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon($"ent-{ghostRolePrototype.ID}", view);

            PriorityGhostRolesGrid.AddChild(panel);
        }

        PriorityGhostRolesBox.Visible = PriorityGhostRolesGrid.ChildCount > 0;
    }

    private void LoadAllowedVoices(IReadOnlyCollection<string> allowedVoices)
    {
        foreach (var allowedVoice in allowedVoices)
        {
            if (!_prototypeManager.TryIndex(allowedVoice, out TTSVoicePrototype? voicePrototype))
                continue;

            var button = new Button()
            {
                HorizontalAlignment = HAlignment.Center,
                Text = Loc.GetString(voicePrototype.Name),
                StyleClasses = { "LabelKeyText" },
                SetSize = new Vector2(315,30),
            };

            button.OnPressed += _ =>
            {
                _entityManager.System<TTSSystem>().RequestPreviewTts(allowedVoice);
            };

            TTSVoicesGrid.AddChild(button);
        }

        TTSVoicesBox.Visible = TTSVoicesGrid.ChildCount > 0;
    }

    private void LoadAllowedLoadouts(IReadOnlyCollection<string> allowedLoadouts)
    {
        foreach (var allowedLoadout in allowedLoadouts)
        {
            if (!_prototypeManager.TryIndex(allowedLoadout, out LoadoutPrototype? loadoutPrototype))
                continue;

            var entProtoId = _entityManager.System<LoadoutSystem>().GetFirstOrNull(loadoutPrototype);
            var name = _entityManager.System<LoadoutSystem>().GetName(loadoutPrototype);

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(6, 6)
            };
            _spriteViews.Add(view);

            if (entProtoId != null)
            {
                var dummyEnt = _entityManager.SpawnEntity(entProtoId, MapCoordinates.Nullspace);
                view.SetEntity(dummyEnt);
            }

            var panel = CreateEntityIcon(name, view);

            AllowedLoadoutsGrid.AddChild(panel);
        }

        AllowedLoadoutsBox.Visible = AllowedLoadoutsGrid.ChildCount > 0;
    }

    private void LoadGhostThemes(IReadOnlyCollection<string> ghostThemes)
    {
        foreach (var ghostTheme in ghostThemes)
        {
            if (!_prototypeManager.TryIndex(ghostTheme, out GhostThemePrototype? ghostThemePrototype))
                continue;

            var panel = CreateIcon(ghostThemePrototype.Name, ghostThemePrototype.Sprite);

            GhostThemesGrid.AddChild(panel);
        }

        GhostThemesBox.Visible = GhostThemesGrid.ChildCount > 0;
    }

    private void LoadBypassRoles(IReadOnlyCollection<string> bypassRoles)
    {
        foreach (var bypassRole in bypassRoles)
        {
            if (!_prototypeManager.TryIndex(bypassRole, out JobPrototype? roleProto))
                continue;

            var sponsorPrototypes = _sponsorsManager?.GetClientPrototypes().ToArray() ?? [];

            var humanoid = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            if (humanoid == null)
                continue;

            var previewEntity = roleProto.JobPreviewEntity ?? (EntProtoId?)roleProto.JobEntity;

            EntityUid dummyEnt;

            if (previewEntity == null)
            {
                var dummy = _prototypeManager.Index(humanoid.Species).DollPrototype;
                dummyEnt = _entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);

                _entityManager.System<HumanoidAppearanceSystem>().LoadProfile(dummyEnt, humanoid);
                _lobbyUIController.GiveDummyJobClothes(dummyEnt, humanoid, roleProto);

                if (_prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(roleProto.ID)))
                {
                    var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(roleProto.ID), _playerManager.LocalSession, humanoid.Species, _entityManager, _prototypeManager, sponsorPrototypes);
                    _lobbyUIController.GiveDummyLoadout(dummyEnt, loadout, true);
                }
            }
            else
            {
                dummyEnt = _entityManager.SpawnEntity(previewEntity, MapCoordinates.Nullspace);
            }

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon(roleProto.Name, view);

            BypassRolesGrid.AddChild(panel);
        }

        BypassRolesBox.Visible = BypassRolesGrid.ChildCount > 0;
    }

    private void LoadAllowedSpecies(IReadOnlyCollection<string> speciesList)
    {
        foreach (var species in speciesList)
        {
            if (!_prototypeManager.TryIndex(species, out SpeciesPrototype? speciesPrototype))
                continue;

            var dummyEnt = _entityManager.SpawnEntity(speciesPrototype.DollPrototype, MapCoordinates.Nullspace);

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4),
            };
            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon(speciesPrototype.Name, view);

            AllowedSpeciesGrid.AddChild(panel);
        }

        AllowedSpeciesBox.Visible = AllowedSpeciesGrid.ChildCount > 0;
    }

    private void LoadAllowedMarkings(IReadOnlyCollection<string> markingsList)
    {
        foreach (var marking in markingsList)
        {
            if (!_prototypeManager.TryIndex(marking, out MarkingPrototype? markingProto))
                continue;

            var species = markingProto.SpeciesRestrictions is { Count: > 0 }
                ? markingProto.SpeciesRestrictions[0]
                : SharedHumanoidAppearanceSystem.DefaultSpecies;

            if (!_prototypeManager.TryIndex(species, out SpeciesPrototype? speciesProto))
                continue;

            var dummyEnt = _entityManager.SpawnEntity(speciesProto.DollPrototype, MapCoordinates.Nullspace);

            var humanoidAppearance = _entityManager.EnsureComponent<HumanoidAppearanceComponent>(dummyEnt);
            var spriteComponent = _entityManager.EnsureComponent<SpriteComponent>(dummyEnt);

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4),
            };

            _entityManager.System<HumanoidAppearanceSystem>().ApplyMarking(markingProto, null, true, humanoidAppearance, spriteComponent);

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon($"marking-{markingProto.ID}", view);

            AllowedMarkingsGrid.AddChild(panel);
        }

        AllowedMarkingsBox.Visible = AllowedMarkingsGrid.ChildCount > 0;

    }

    private void LoadPriorityAntags(IReadOnlyCollection<string> priorityAntags)
    {
        foreach (var priorityAntag in priorityAntags)
        {
            if (!_prototypeManager.TryIndex(priorityAntag, out AntagPrototype? antagProto))
                continue;

            var panel = CreateIcon(antagProto.Name, antagProto.PreviewIcon);

            PriorityAntagGrid.AddChild(panel);
        }

        PriorityAntagBox.Visible = PriorityAntagGrid.ChildCount > 0;
    }

    private void LoadOpenAntags(IReadOnlyCollection<string> openAntags)
    {
        foreach (var openAntag in openAntags)
        {
            if (!_prototypeManager.TryIndex(openAntag, out AntagPrototype? antagProto))
                continue;

            var panel = CreateIcon(antagProto.Name, antagProto.PreviewIcon);

            OpenAntagGrid.AddChild(panel);
        }

        OpenAntagBox.Visible = OpenAntagGrid.ChildCount > 0;
    }

    private void LoadPriorityRoles(IReadOnlyCollection<string> priorityRoles)
    {
        foreach (var priorityRole in priorityRoles)
        {
            if (!_prototypeManager.TryIndex(priorityRole, out JobPrototype? roleProto))
                continue;

            var sponsorPrototypes = _sponsorsManager?.GetClientPrototypes().ToArray() ?? [];

            var humanoid = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            if (humanoid == null)
                continue;

            var previewEntity = roleProto.JobPreviewEntity ?? (EntProtoId?)roleProto.JobEntity;

            EntityUid dummyEnt;

            if (previewEntity == null)
            {
                var dummy = _prototypeManager.Index(humanoid.Species).DollPrototype;
                dummyEnt = _entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);

                _entityManager.System<HumanoidAppearanceSystem>().LoadProfile(dummyEnt, humanoid);
                _lobbyUIController.GiveDummyJobClothes(dummyEnt, humanoid, roleProto);

                if (_prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(roleProto.ID)))
                {
                    var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(roleProto.ID), _playerManager.LocalSession, humanoid.Species, _entityManager, _prototypeManager, sponsorPrototypes);
                    _lobbyUIController.GiveDummyLoadout(dummyEnt, loadout, true);
                }
            }
            else
            {
                dummyEnt = _entityManager.SpawnEntity(previewEntity, MapCoordinates.Nullspace);
            }

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon(roleProto.Name, view);

            PriorityRolesGrid.AddChild(panel);
        }

        PriorityRolesBox.Visible = PriorityRolesGrid.ChildCount > 0;
    }

    private void LoadOpenRoles(IReadOnlyCollection<string> openRoles)
    {
        foreach (var openRole in openRoles)
        {
            if (!_prototypeManager.TryIndex(openRole, out JobPrototype? roleProto))
                continue;

            var sponsorPrototypes = _sponsorsManager?.GetClientPrototypes().ToArray() ?? [];

            var humanoid = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            if (humanoid == null)
                continue;

            var previewEntity = roleProto.JobPreviewEntity ?? (EntProtoId?)roleProto.JobEntity;

            EntityUid dummyEnt;

            if (previewEntity == null)
            {
                var dummy = _prototypeManager.Index(humanoid.Species).DollPrototype;
                dummyEnt = _entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);

                _entityManager.System<HumanoidAppearanceSystem>().LoadProfile(dummyEnt, humanoid);
                _lobbyUIController.GiveDummyJobClothes(dummyEnt, humanoid, roleProto);

                if (_prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(roleProto.ID)))
                {
                    var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(roleProto.ID), _playerManager.LocalSession, humanoid.Species, _entityManager, _prototypeManager, sponsorPrototypes);
                    _lobbyUIController.GiveDummyLoadout(dummyEnt, loadout, true);
                }
            }
            else
            {
                dummyEnt = _entityManager.SpawnEntity(previewEntity, MapCoordinates.Nullspace);
            }

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);
            _spriteViews.Add(view);

            var panel = CreateEntityIcon(roleProto.Name, view);

            OpenRolesGrid.AddChild(panel);
        }

        OpenRolesBox.Visible = OpenRolesGrid.ChildCount > 0;
    }

    private PanelContainer CreateEntityIcon(string name, SpriteView spriteView)
    {
        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/light_panel_background_bordered.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        var panel = new PanelContainer()
        {
            SetSize = new Vector2(200, 200),
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
            Align = BoxContainer.AlignMode.Center
        };

        panel.AddChild(box);
        panel.PanelOverride = back;

        var title = new RichTextLabel()
        {
            HorizontalAlignment = HAlignment.Center,
            Text = Loc.GetString(name),
            StyleClasses = { "LabelKeyText" }
        };

        box.AddChild(spriteView);
        box.AddChild(title);

        return panel;
    }

    private PanelContainer CreateIcon(string name, SpriteSpecifier spriteSpecifier)
    {
        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/light_panel_background_bordered.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        var panel = new PanelContainer()
        {
            SetSize = new Vector2(200, 200),
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        panel.AddChild(box);
        panel.PanelOverride = back;

        var icon = new TextureRect()
        {
            SetSize = new Vector2(128, 128),
            Texture = spriteSpecifier.Frame0(),
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
        };

        var title = new RichTextLabel()
        {
            HorizontalAlignment = HAlignment.Center,
            Text = Loc.GetString(name),
            StyleClasses = { "LabelKeyText" }
        };

        box.AddChild(icon);
        box.AddChild(title);

        return panel;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        _accumulatedTime += args.DeltaSeconds;
        foreach (var spriteView in _spriteViews)
        {
            spriteView.OverrideDirection = (Direction) ((int) _accumulatedTime % 4 * 2);
        }
    }
}
