using Content.Shared._Sunrise.Roadmap;
using Content.Shared._Sunrise.SunriseCCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.Roadmap
{
    [GenerateTypedNameReferences]
    public sealed partial class Roadmap : Control
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IPrototypeManager _prototype = default!;

        public Roadmap()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            var roadmapId = _cfg.GetCVar(SunriseCCVars.RoadmapId);
            if (!_prototype.TryIndex<RoadmapVersionsPrototype>(roadmapId, out var roadmapVersions))
                return;

            PopulateRoadmap(roadmapVersions);
        }

        private void PopulateRoadmap(RoadmapVersionsPrototype roadmapVersions)
        {
            var msg = new FormattedMessage();
            var headerLocale = Loc.GetString("ui-roadmap-header");
            msg.AddMarkupOrThrow($"[font size=24][bold]{headerLocale} {roadmapVersions.Fork}[/bold][/font]");
            Header.SetMessage(msg);

            Items2024.RemoveAllChildren();
            Items2025.RemoveAllChildren();
            Items2026.RemoveAllChildren();

            foreach (var version in roadmapVersions.Versions)
            {
                var targetColumn = version.Key switch
                {
                    "2024" => Items2024,
                    "2025" => Items2025,
                    "2026" => Items2026,
                    _ => Items2024
                };

                foreach (var goal in version.Value.Goals)
                {
                    var roadmapItem = new RoadmapItem()
                    {
                        HeaderText = Loc.TryGetString($"{goal.Value.Id}-name", out var name) ? name : goal.Value.Name,
                        Text = Loc.TryGetString($"{goal.Value.Id}-desc", out var desc) ? desc : goal.Value.Desc,
                        ItemState = goal.Value.State,
                    };

                    targetColumn.AddChild(roadmapItem);
                }
            }
        }
    }
}
